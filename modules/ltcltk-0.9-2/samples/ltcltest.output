Test 1: Setting variable vnum to number 1
  TEST OK
Test 2: reading vnum back, result should be a number 1
  TEST OK
Test 3: Reading unset var vbool (should fail)
  TEST OK
Test 4: Setting nowhere::var to 1 (should fail)
  TEST OK
Test 5: Setting variable vbool to boolean true
  TEST OK
Test 6: reading vbool back, result should be a number 1
  TEST OK
Test 7: Setting variable vstr to string 'Hallo'
  TEST OK
Test 8: Reading vstr back, result should be a string 'Hallo'
  TEST OK
Test 9: Setting variable vlst to list {1, 2, 3, 'a', 'b', 'c'}
  TEST OK
Test 10: Reading vlst back, result should be a table {1, 2, 3, 'a', 'b', 'c'}
  TEST OK
Test 11: Setting variable vnlst to list {1, {2, {3, 4}, 5}, 6}
  TEST OK
Test 12: Reading vnlst back, result should be a table {1, {2, {3, 4}, 5}, 6}
  TEST OK
Test 13: Setting variable vapp1 to string 'abc' then appending 'def'
  TEST OK
Test 14: Reading vapp1 back, result should be a string 'abcdef'
  TEST OK
Test 15: Setting variable vapp2 to list {1,2,3} then appending 4
  TEST OK
Test 16: Reading vapp2 back, result should be a table {1,2,3,4}
  TEST OK
Test 17: Appending list {5,6} to vapp2
  TEST OK
Test 18: Reading vapp2 back, result should be a table {1,2,3,4,{5,6}}
  TEST OK
Test 19: Setting variable vnil to nil
  TEST OK
Test 20: Reading vnil back, result should be an empty string ''
  TEST OK
Test 21: Attempting to refer to index 1 or array variable varr1, should fail
  TEST OK
Test 22: creating an array {'a' 1 'b' 2 'c' 3} from tcl, then read indices 'a', 'b', 'c' from it. Should return 1, 2, 3 in turn.
  TEST OK
Test 23: adding 'd'=4 to varr1, then read index 'd' back, should return a number 4
  TEST OK
Test 24: retrieving undefined index 'e' from varr1, should fail
  TEST OK
Test 25: creating recursive table a={a}, then setting Tcl var to it. Should fail.
  TEST OK
Test 26: creating recursive table a={{a[2]},{a[1]}}, then setting Tcl var to it. Should fail.
  TEST OK
Test 27: Calling makearglist with {1,2,3}, should return {1,2,3}
  TEST OK
Test 28: TCalling 'list' with a 200 parameter array, should return a table with said 200 values
  TEST OK
Test 29: TCalling 'list' with a 100 entry parameter hash, should return a 200 entry list with matching entries
  TEST OK
Test 30: Calling makearglist with {1,2,3,c=4}, should return {1,2,3, '-c',4}
  TEST OK
Test 31: Evaluating 'return $vnum', result should be a number 1
  TEST OK
Test 32: Evaluating 'return $vbool', result should be a number 1
  TEST OK
Test 33: Evaluating 'return $vstr', result should be a string 'Hallo'
  TEST OK
Test 34: Evaluating 'return $vlst', result should be a table {1, 2, 3, 'a', 'b', 'c'}
  TEST OK
Test 35: Evaluating 'return $vnlst', result should be a table {1, {2, {3, 4}, 5}, 6}
  TEST OK
Test 36: Evaluating 'return $vnil, result should be an empty string ''
  TEST OK
Test 37: Evaluating 'bla fasel', should fail
  TEST OK
Test 38: Evaluating 'expr 1+2', result should be a number 3
  TEST OK
Test 39: Evaluating 'return "Hallo"', result should be a string 'Hallo'
  TEST OK
Test 40: Evaluating 'list 1 2 3', result should be a table {1,2,3}
  TEST OK
Test 41: Evaluating 'list 1 [list 2 3] 4', result should be a table {1,{2,3},4}
  TEST OK
Test 42: Calling 'expr' with parameters 1, '+', 2, result should be a number 3
  TEST OK
Test 43: Calling 'list' with parameters 1,2,3, result should be a table {1,2,3}
  TEST OK
Test 44: Calling 'concat' with parameter 'Hallo', result should be a string 'Hallo'
  TEST OK
Test 45: Calling 'bla' without parameter, should fail
  TEST OK
Test 46: Calling 'bla' with parameter 'fasel', should fail
  TEST OK
Test 47: Calling 'puts' with parameters 1,2, should fail
  TEST OK
Test 48: TCalling 'list' with parameter array {1,2,3}, should return a table {1,2,3}
  TEST OK
Test 49: Making argument list from {1,2,c=3} then TCalling list with this list, should return a table {1,2,'-c',3}
  TEST OK
Test 50: Making argument list from {1,c=2,3} then TCalling list with this list, should return a table {1,3,'-c',2}
  TEST OK
Test 51: Registering a simple function with tcl, taking no arguments and returning nothing
  TEST OK
Test 52: Checking wether function has been registered
  TEST OK
Test 53: Calling said function through ltcl.eval, should return an empty string
  TEST OK
Test 54: Calling said function through ltcl.call, should return an empty string
  TEST OK
Test 55: Registering a function with tcl returning its first argument
  TEST OK
Test 56: Calling said function through eval with argument 1, should return 1
  TEST OK
Test 57: Calling said function through eval with argument [expr 1], should return number 1
  TEST OK
Test 58: Calling said function through eval with argument 'Hallo', should return string 'Hallo'
  TEST OK
Test 59: Registering a function with tcl returning a list of its arguments
  TEST OK
Test 60: Calling said function through ltcl.eval with arguments 1,2,3, should return table {1,2,3}
  TEST OK
Test 61: Calling said function through ltcl.call with arguments 4,5,6, should return table {4,5,6}
  TEST OK
Test 62: Registering a function then calling it then unregistering it
  TEST OK
Test 63: Checking wether unregistered function has indeed been removed
  TEST OK
Test 64: Trying to call unregistered function, should fail
  TEST OK
Test 65: Calling a lua function that compares its argument to number 1 with argument 1, should return 1
  TEST OK
Test 66: Calling a lua function that compares its argument to string 'Hallo' with argument 'Hallo', should return 1
  TEST OK
Test 67: Calling said function with a string 'Huhu', should return 0
  TEST OK
Test 68: Calling a lua function that compares its argument to table {1,2,3} with argument [list 1 2 3], should return 1
  TEST OK
Test 69: Calling a nonexistent lua function, should fail
  TEST OK
Test 70: Calling a lua function that returns all of its arguments with parameters 1 2 3, should return number 1
  TEST OK
Test 71: Converting string 'abc' to utf8, result should be a string 'abc'
  TEST OK
Test 72: Converting that string 'abc' from utf8, result should be a string 'abc'
  TEST OK
Test 73: Calling toutf8 with bogus encoding, should fail
  TEST OK
Test 74: Calling fromutf8 with bogus encoding, should fail
  TEST OK
Test 75: Calling list using callt with args {x=tcl:vals(1)}, should return a table {1}
  TEST OK
Test 76: Calling list using callt with args {tcl:vals(1,2,3)}, should return a table {'-x',1,2,3}
  TEST OK
Test 77: Making argument list from {x=tcl:vals(1,2,3),y=tcl:vals(4,5)} then Tcalling list with this list, should return a table {'-x',1,2,3,'-y',4,5} or {'-y',4,5,'-x',1,2,3}
  TEST OK
Test 78: Setting flags to 1+2+8+32+64+256, checking against 1,2,4,6,32,33, should return 1,2,nil,nil,32,33
  TEST OK
Test 79: Checking flags against 'bla', should fail
  TEST OK
Test 80: Checking 'bla' against 1,2,4, should fail
  TEST OK
Test 81: Setting write trace on tcl var tracea, then setting tracea to 42. Should call trace func with a, nil, and at least ltcl.TRACE_WRITES
  TEST OK
Test 82: Now unsetting said variable, trace should still be there and behave as before
  TEST OK
Test 83: Setting write trace on tcl var tracea (which is 42), that changes tracea to 17 before reading. Should call trace func with a, nil, and at least ltcl.TRACE_READS, and getvar should return 17
  TEST OK
Tests 83 failed 0
